{"version":3,"sources":["webpack:///./node_modules/ocular-gatsby/src/templates/doc-page-markdown.jsx"],"names":["query","replaceLinks","props","html","data","docBySlug","relativeLinks","pageContext","replace","link","href","startsWith","hrefWithoutLeadingSlash","slice","DocTemplate","state","render","__html","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACO,IAAMA,KAAK,eAAX;;AAgBP,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,MACpBC,IADoB,GACZD,KAAK,CAACE,IAAN,CAAWC,SADC,CACpBF,IADoB;AAAA,MAEpBG,aAFoB,GAEHJ,KAAK,CAACK,WAFH,CAEpBD,aAFoB;AAI3B,SAAOH,IAAI,CAACK,OAAL,CAAa,iBAAb,EAAgC,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACrD;AACA,QAAIA,IAAI,CAACC,UAAL,CAAgB,MAAhB,KAA2BD,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAA/B,EAAqD;AACnD;AACA,aAAOF,IAAP;AACD;;AACD,QAAMG,uBAAuB,GAAGF,IAAI,CAACC,UAAL,CAAgB,GAAhB,IAAuBD,IAAI,CAACG,KAAL,CAAW,CAAX,CAAvB,GAAuCH,IAAvE,CANqD,CAOrD;AACA;AACA;AACA;;AACA,uBAAgBJ,aAAa,CAACM,uBAAD,CAA7B;AACD,GAZM,CAAP;AAaD;;IAEoBE,W;;;;;AACnB,uBAAYZ,KAAZ,EAAmB;AAAA;;AACjB,wCAAMA,KAAN;AACA,UAAKa,KAAL,GAAa;AAACZ,UAAI,EAAEF,YAAY,CAACC,KAAD;AAAnB,KAAb;AAFiB;AAGlB;;;;SAEDc,M,GAAA,kBAAS;AAAA,QACAb,IADA,GACQ,KAAKY,KADb,CACAZ,IADA;AAEP,WACE,wEACE;AACE,eAAS,EAAC,eADZ;AAEE,6BAAuB,EAAE;AAACc,cAAM,EAAEd;AAAT;AAF3B,MADF,CADF;AAQD,G;;;EAhBsCe,4CAAK,CAACC,S","file":"component---node-modules-ocular-gatsby-src-templates-doc-page-markdown-jsx-2e8c4f4fd5dff10a594c.js","sourcesContent":["import React from 'react';\n\nimport {graphql} from 'gatsby';\n\n// Query for the markdown doc by slug\n// (Note: We could just search the allMarkdown from WebsiteConfig ourselves)\nexport const query = graphql`\n  query DocBySlug($slug: String!) {\n    docBySlug: markdownRemark(fields: {slug: {eq: $slug}}) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        category\n        tags\n      }\n    }\n  }\n`;\n\nfunction replaceLinks(props) {\n  const {html} = props.data.docBySlug;\n  const {relativeLinks} = props.pageContext;\n\n  return html.replace(/href=\"([^\"]+)\"/g, (link, href) => {\n    // don't rewrite external links, don't rewrite links to anchors\n    if (href.startsWith('http') || href.startsWith('#')) {\n      // TODO - we could style them differently though\n      return link;\n    }\n    const hrefWithoutLeadingSlash = href.startsWith('/') ? href.slice(1) : href;\n    // replace links to:\n    // - known physical files, either relative to this file or relative to root\n    // - known routes, either relative to the route of this page or to the home page\n    // by a link to their corresponding route, expresed relative to the home page\n    return `href=\"${relativeLinks[hrefWithoutLeadingSlash]}\"`;\n  });\n}\n\nexport default class DocTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {html: replaceLinks(props)};\n  }\n\n  render() {\n    const {html} = this.state;\n    return (\n      <div>\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{__html: html}}\n        />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}