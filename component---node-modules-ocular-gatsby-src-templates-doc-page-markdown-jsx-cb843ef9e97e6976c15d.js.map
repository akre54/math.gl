{"version":3,"sources":["webpack:///./node_modules/ocular-gatsby/src/templates/doc-page-markdown.jsx"],"names":["query","replaceLinks","props","html","data","docBySlug","relativeLinks","pageContext","replace","link","href","startsWith","hrefWithoutLeadingSlash","slice","DocTemplate","state","render","__html","React","Component"],"mappings":";;;;;;;;;;;;;;;2KAIA;AACA;AACO,GAAMA,MAAK,aAAX,CAgBP,QAASC,aAAT,CAAsBC,KAAtB,CAA6B,IACpBC,KADoB,CACZD,KAAK,CAACE,IAAN,CAAWC,SADC,CACpBF,IADoB,IAEpBG,cAFoB,CAEHJ,KAAK,CAACK,WAFH,CAEpBD,aAFoB,CAI3B,MAAOH,KAAI,CAACK,OAAL,CAAa,iBAAb,CAAgC,SAACC,IAAD,CAAOC,IAAP,CAAgB,CACrD;AACA,GAAIA,IAAI,CAACC,UAAL,CAAgB,MAAhB,GAA2BD,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAA/B,CAAqD,CACnD;AACA,MAAOF,KAAP,CACD,CACD,GAAMG,wBAAuB,CAAGF,IAAI,CAACC,UAAL,CAAgB,GAAhB,EAAuBD,IAAI,CAACG,KAAL,CAAW,CAAX,CAAvB,CAAuCH,IAAvE,CACA;AACA;AACA;AACA;AACA,gBAAgBJ,aAAa,CAACM,uBAAD,CAA7B,MACD,CAZM,CAAP,CAaD,C,GAEoBE,Y,sFACnB,qBAAYZ,KAAZ,CAAmB,WACjB,iCAAMA,KAAN,QACA,MAAKa,KAAL,CAAa,CAACZ,IAAI,CAAEF,YAAY,CAACC,KAAD,CAAnB,CAAb,CAFiB,aAGlB,C,wCAEDc,M,CAAA,iBAAS,IACAb,KADA,CACQ,KAAKY,KADb,CACAZ,IADA,CAEP,MACE,uEACE,kEACE,SAAS,CAAC,eADZ,CAEE,uBAAuB,CAAE,CAACc,MAAM,CAAEd,IAAT,CAF3B,EADF,CADF,CAQD,C,sBAhBsCe,4CAAK,CAACC,S","file":"component---node-modules-ocular-gatsby-src-templates-doc-page-markdown-jsx-cb843ef9e97e6976c15d.js","sourcesContent":["import React from 'react';\n\nimport {graphql} from 'gatsby';\n\n// Query for the markdown doc by slug\n// (Note: We could just search the allMarkdown from WebsiteConfig ourselves)\nexport const query = graphql`\n  query DocBySlug($slug: String!) {\n    docBySlug: markdownRemark(fields: {slug: {eq: $slug}}) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        category\n        tags\n      }\n    }\n  }\n`;\n\nfunction replaceLinks(props) {\n  const {html} = props.data.docBySlug;\n  const {relativeLinks} = props.pageContext;\n\n  return html.replace(/href=\"([^\"]+)\"/g, (link, href) => {\n    // don't rewrite external links, don't rewrite links to anchors\n    if (href.startsWith('http') || href.startsWith('#')) {\n      // TODO - we could style them differently though\n      return link;\n    }\n    const hrefWithoutLeadingSlash = href.startsWith('/') ? href.slice(1) : href;\n    // replace links to:\n    // - known physical files, either relative to this file or relative to root\n    // - known routes, either relative to the route of this page or to the home page\n    // by a link to their corresponding route, expresed relative to the home page\n    return `href=\"${relativeLinks[hrefWithoutLeadingSlash]}\"`;\n  });\n}\n\nexport default class DocTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {html: replaceLinks(props)};\n  }\n\n  render() {\n    const {html} = this.state;\n    return (\n      <div>\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{__html: html}}\n        />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}